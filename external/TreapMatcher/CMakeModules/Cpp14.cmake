if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE CLANG_VERSION)
	if (CLANG_VERSION VERSION_LESS 3.4)
        message(FATAL_ERROR "clang version >= 3.4 required.")
	endif()

	message(STATUS "clang++ found")
	set(CPP_DEF "-std=c++14")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")

	execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
	if (GCC_VERSION VERSION_LESS 5)
		message(FATAL_ERROR "gcc version >= 5 required; detected: ${GCC_VERSION}.")
	endif()

	message(STATUS "g++ found")
	set(CPP_DEF "-std=c++14")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
	execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE ICC_VERSION)
	message(STATUS "Detected ICC version: ${ICC_VERSION}")
	if (ICC_VERSION VERSION_LESS 16)
        message(FATAL_ERROR "icc version >= 16 required.")
	endif()

	message(STATUS "Intel found")
	set(CPP_DEF "-std=c++14")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -ansi-alias")
else()
	message(FATAL_ERROR "Compiler not recognized, exiting")
	return()
endif()
list(APPEND CMAKE_CXX_FLAGS ${CPP_DEF})
